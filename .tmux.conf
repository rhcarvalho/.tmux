# cat << ►_◄ > /dev/null


# -- general -------------------------------------------------------------------

set -g default-terminal "screen-256color" # colors!
setw -g xterm-keys on
set -s escape-time 0                      # fastest command sequences
set -sg repeat-time 600                   # increase repeat timeout

set -g status-utf8 on                     # expect UTF-8
setw -g utf8 on

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf \\; display \"~/.tmux.conf reloaded\"'"

# reload configuration
bind r source ~/.tmux.conf \; display '~/.tmux.conf reloaded'

# vagrant integration
bind U send C-l 'vagrant up' Enter
bind S run 'vagrant suspend > /dev/null' \; display 'vagrant suspended'
bind v send C-l 'vagrant ssh' Enter


# -- display -------------------------------------------------------------------

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows

setw -g automatic-rename on # rename window to reflect current program
# renumber windows when a window is closed
set -g renumber-windows on

#set -g set-titles on                        # set terminal title
#set -g set-titles-string '#h ❐ #S ● #I #W'

set -g display-panes-time 1500 # slightly longer pane indicators display time
set -g display-time 1000       # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds


# -- navigation ----------------------------------------------------------------

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse > /dev/null"


# -- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s apply_configuration'


# ►_◄
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# toggle_mouse() {
#   old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#   new=""
#
#   if [ "$old" = "on" ] ; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mode-mouse $new \;\
#        set -g mouse-resize-pane $new \;\
#        set -g mouse-select-pane $new \;\
#        set -g mouse-select-window $new \;\
#        display "mouse: $new"
# }
#
# apply_configurable_bindings() {
#   tmux_conf_new_windows_retain_current_path=${tmux_conf_new_windows_retain_current_path:-false}
#   if [ x"$tmux_conf_new_windows_retain_current_path" = x"true" ] || [ x"$tmux_conf_new_windows_retain_current_path" = x"1" ] ; then
#     tmux bind c new-window -c '#{pane_current_path}'
#   else
#     tmux bind c new-window
#   fi
#
#   tmux_conf_new_panes_retain_current_path=${tmux_conf_new_panes_retain_current_path:-true}
#   if [ x"$tmux_conf_new_panes_retain_current_path" = x"true" ] || [ x"$tmux_conf_new_panes_retain_current_path" = x"1" ] ; then
#     tmux  bind '"' split-window -v -c "#{pane_current_path}"  \;\
#           bind % split-window -h -c "#{pane_current_path}"    \;\
#           bind - split-window -v -c "#{pane_current_path}"    \;\
#           bind _ split-window -h -c "#{pane_current_path}"
#   else
#     tmux  bind '"' split-window -v  \;\
#           bind % split-window -h    \;\
#           bind - split-window -v    \;\
#           bind _ split-window -h
#   fi
#
#   tmux_conf_new_session_prompt=${tmux_conf_new_session_prompt:-false}
#   if [ x"$tmux_conf_new_session_prompt" = x"true" ] || [ x"$tmux_conf_new_session_prompt" = x"1" ] ; then
#     tmux bind C-c command-prompt -p new-session 'new-session -s %%'
#   else
#     tmux bind C-c new-session
#   fi
# }
#
# apply_configuration() {
#  apply_configurable_bindings
#  for name in $(printenv | grep -Eo ^tmux_conf_[^=]+); do tmux setenv -gu $name; done;
# }
#
# $@
