# cat << ►_◄ > /dev/null
# (‑●‑●)> released under the WTFPL v2 license, by Gregory Pakosz (@gpakosz)


# -- general -------------------------------------------------------------------

set -g default-terminal "screen-256color" # colors!
setw -g xterm-keys on
set -s escape-time 0                      # fastest command sequences
set -sg repeat-time 600                   # increase repeat timeout

set -g history-limit 5000                 # boost history

# edit configuration
bind e new-window -n '~/.tmux.conf' "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf \\; display \"~/.tmux.conf reloaded\"'"

# reload configuration
bind r source ~/.tmux.conf \; display '~/.tmux.conf reloaded'

# vagrant integration
bind U send C-l 'vagrant up' Enter
bind S send C-l 'vagrant suspend' Enter
bind v send C-l 'vagrant ssh' Enter


# -- display -------------------------------------------------------------------

set -g base-index 1         # start windows numbering at 1
setw -g pane-base-index 1   # make pane numbering consistent with windows

#setw -g automatic-rename on # rename window to reflect current program
setw -g allow-rename off     # ensure name sticks to what I set

# renumber windows when a window is closed
set -g renumber-windows on

set -g display-panes-time 1500 # slightly longer pane indicators display time
set -g display-time 1000       # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds


# -- navigation ----------------------------------------------------------------

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s maximize_pane'

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse"


# -- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s apply_configuration'


# ►_◄
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# maximize_pane() {
#   tmux -q -L swap-pane-test -f /dev/null new-session -d \; new-window \; new-window \; swap-pane -t :1 \; kill-session || { tmux display 'your tmux version has a buggy swap-pane command - see ticket #108, fixed in upstream commit 78e783e'; exit; }
#   __current_pane=$(tmux display -p '#{pane_id}')
#
#   __dead_panes=$(tmux list-panes -s -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -o '^1 %.\+maximized.\+$' || true)
#   __restore=$(echo "${__dead_panes}" | sed -n -E -e "s/^1 ${__current_pane} .+maximized.+(%[0-9]+)$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t ${__current_pane}/p" -e "s/^1 (%[0-9]+) .+maximized.+${__current_pane}$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t \1/p" )
#
#   if [ x"${__restore}" = x ] ; then
#     [ x"$(tmux list-panes | wc -l | sed 's/^ *//g')" = x1 ] && tmux display "Can't maximize with only one pane" && return
#     __window=$(tmux new-window -P "exec maximized...& tmux setw remain-on-exit on; clear; tmux clear-history; printf 'Pane has been maximized, press <prefix>+ to restore. %s' \\${__current_pane};")
#     __window=${__window%.*}
#
#     __guard=50
#     while ( [ x"$(tmux list-panes -t ${__window} -F '#{session_name}:#{window_index} #{pane_dead}')" != x"${__window} "1 ] && [ x"${__guard}" != x0 ] ) ; do sleep 0.01 ; __guard=$((__guard - 1)); done
#     if [ x"${__guard}" = 0 ] ; then
#       exit 1
#     fi
#
#     __new_pane=$(tmux display -p '#{pane_id}')
#     tmux setw remain-on-exit off \; swap-pane -s "${__current_pane}" -t "${__new_pane}"
#   else
#     ${__restore} || tmux kill-pane
#   fi
# }
#
# toggle_mouse() {
#   if (tmux show -g -w |grep -q mode-mouse); then
#     old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ] ; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mode-mouse $new \;\
#          set -g mouse-resize-pane $new \;\
#          set -g mouse-select-pane $new \;\
#          set -g mouse-select-window $new \;\
#          display "mouse: $new"
#   else
#     old=$(tmux show -g | grep mouse | head -n 1 | cut -d' ' -f2)
#     new=""
#
#     if [ "$old" = "on" ] ; then
#       new="off"
#     else
#       new="on"
#     fi
#
#     tmux set -g mouse $new \;\
#          display "mouse: $new"
#   fi
# }
#
# apply_configurable_bindings() {
#   tmux_conf_new_windows_retain_current_path=${tmux_conf_new_windows_retain_current_path:-false}
#   if [ x"$tmux_conf_new_windows_retain_current_path" = x"true" ] || [ x"$tmux_conf_new_windows_retain_current_path" = x"1" ] ; then
#     tmux bind c new-window -c '#{pane_current_path}'
#   else
#     tmux bind c new-window
#   fi
#
#   tmux_conf_new_panes_retain_current_path=${tmux_conf_new_panes_retain_current_path:-true}
#   if [ x"$tmux_conf_new_panes_retain_current_path" = x"true" ] || [ x"$tmux_conf_new_panes_retain_current_path" = x"1" ] ; then
#     tmux  bind '"' split-window -v -c "#{pane_current_path}"  \;\
#           bind % split-window -h -c "#{pane_current_path}"    \;\
#           bind - split-window -v -c "#{pane_current_path}"    \;\
#           bind _ split-window -h -c "#{pane_current_path}"
#   else
#     tmux  bind '"' split-window -v  \;\
#           bind % split-window -h    \;\
#           bind - split-window -v    \;\
#           bind _ split-window -h
#   fi
#
#   tmux_conf_new_session_prompt=${tmux_conf_new_session_prompt:-false}
#   if [ x"$tmux_conf_new_session_prompt" = x"true" ] || [ x"$tmux_conf_new_session_prompt" = x"1" ] ; then
#     tmux bind C-c command-prompt -p new-session 'new-session -s %%'
#   else
#     tmux bind C-c new-session
#   fi
# }
#
# apply_configuration() {
#  apply_configurable_bindings
#  for name in $(printenv | grep -Eo ^tmux_conf_[^=]+); do tmux setenv -gu $name; done;
# }
#
# $@
